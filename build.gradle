/*buildscript {


    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
               
    }
}
*/

//Apply java-library plugin to add support for Java Library
apply plugin: 'java'

//Apply war plugin
apply plugin: 'war'

//Apply Findbugs inspection plugin
apply plugin: 'findbugs'

//Apply Jacoco plugin
apply plugin: 'jacoco'

//apply plugin: 'com.bmuschko.tomcat'

//In questa sezione sono dichiarati i repository da cui scaricare le dipendenze necessarie al progetto
repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
}

// JDK version source compatibility
sourceCompatibility = 1.8

// project version
//version = '1.0'

// creazione del file war nella cartella build\libs, nella post compilazione di Jenkins viene deployato su Tomcat 
// War file name 
war.baseName = 'AsteOnLine'

// Web directory, this overrides the default value "webapp"
project.webAppDirName = 'WebContent'

//Set source directory, istruisco gradle su dove trovare i file di produzione ed i file di test. Il sourceSets è una struttura di directory che contiene i sorgenti java. Il plugin java ne contiene 2 di default che sono main e test: è stato necessario riscriverli perchè uso la struttura Dynamic Web e non quella standard di un progetto gradle
sourceSets {
        //percorso file di produzione
        main {
            java {
                srcDirs 'src'
            }
        }
        //percorso file di test
        test {
	        java {
	        	//srcDirs 'test' //decommentare se si vuole comprendere tutti i test (di unità e di sistema) nel sourceSet test 
	            srcDirs 'test/it/unisannio/sweng/rosariogoglia/daoImpl' //indico a gradle di includere nel SourceSet test solo i test di unità
	        }
    	}   
    	//divisione dei casi di test di sistema
    	systemTest{
			java{
				srcDir 'test/it/unisannio/sweng/rosariogoglia/system'
			}
		}
}

dependencies {

     //dipendendenze librerie locali
     compile fileTree(dir: 'WebContent/WEB-INF/lib', include: ['*.jar'])
     
     //Import di tutte le librerie esterne necessarie
     compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.+'
  	 compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.+'
     compile 'org.jacoco:jacoco-maven-plugin:0.7.+'
     compile 'com.google.guava:guava:21.0'
     
     //Import MySql connector Java driver
     compile group: 'mysql', name: 'mysql-connector-java', version: '5.+'
     
     //Import JUnit test framework       
     testCompile "junit:junit:4.11"
     
     //Import la libreria selenium 
     testCompile 'org.seleniumhq.selenium:selenium-java:3.3.1'
     
     //testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
     
     //dipendenze per il task dei test di sistema
     systemTestCompile sourceSets.main.output //indica che in fase di compilazione dei casi di test di sistema, necessitano di tutti i file compilati della cartella "main" prodotti nel SourceSets (altrimenti non sarebbe possibile eseguire i casi di test di sistema), quindi dei compilati del codice di produzione
     systemTestCompile configurations.testCompile //indica che in fase di compilazione dei casi di test di sistema, sono necessarie le stesse configurazioni usate per i casi di test
     systemTestCompile sourceSets.test.output ////indica che in fase di compilazione dei casi di test di sistema, necessitano di tutti i file compilati della cartella "test" prodotti nel SourceSets 
     systemTestCompile configurations.testRuntime
     
     
   
  /*  // dependencies to run on tomcat, are mandatory for tomcat plugin
    def tomcatVersion = '7.0.57'
   
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
    */   
}

/*
// context where tomcat is deployed, by defautl localhost:8080/
tomcatRun.contextPath = '/'
tomcatRunWar.contextPath = '/'
*/

//setting del task Javadoc
javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    failOnError = false
}

//setting del task findbug
findbugs{
	sourceSets = [sourceSets.main]
	ignoreFailures = true //ignora gli errori di findbugs facendo completare la build, logicamente gli errori non saranno mostrati nel file html
    reportsDir = file("$project.buildDir/reports/findbugsReport")
    effort = "max" //livello di sforzo di analisi eseguito dal tool, livelli più elevati aumentano la precisione e trovano più bug a spese del tempo di esecuzione e del consumo di memoria.
    reportLevel = "high"
    
}

tasks.withType(FindBugs) {
           
    reports {
        xml.enabled = false
        html.enabled = true
      //xml.destination = file("$project.buildDir/reports/findbugs/findbugs-output.xml")
      //html.destination = file ("$project.buildDir/reports/findbugs/findbugs-output.html")
      //si può anche scrivere così:
      //html.destination "$project.buildDir/reports/findbugs/findbugs-output.html"
    }
     
}

//setting del task test
test {
   ignoreFailures = true
   finalizedBy jacocoTestReport
   
   reports {
       junitXml.enabled = false
       html.enabled = true
       html.destination = file("$project.buildDir/reports/JUnitReport")
   }               
}

//setting del task dei test di sistema
task systemTest(type: Test){
	ignoreFailures = true
	testClassesDir = sourceSets.systemTest.output.classesDir //indica che le classi di test compilate si trovano nella directory di output prodotta dal SourceSets
	classpath = sourceSets.systemTest.runtimeClasspath
}

//setting del task Jacoco
jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$project.buildDir/reports/jacocoReport")
}

tasks.withType(JacocoReport) {

    reports {
        xml.enabled false
        csv.enabled false
        html.enabled = true
       	html.destination = file("$project.buildDir/reports/jacocoReport/jacoco-output.html")
    }
}


//creazione e caricamente DB dal dump
task createDB{
	project.exec {
		
		commandLine 'mysql', "--host=localhost", "--port=3306", "--user=root", "--password=root", "--execute=CREATE DATABASE IF NOT EXISTS ecommerce"		
		
	}
}

task loadDB{
	project.exec{
		
		standardInput = new FileInputStream(project.file("$rootProject.projectDir/DumpEcommerce.sql"))

		commandLine 'mysql', "--user=root", "--password=root", "--host=localhost", "--port=3306", 'ecommerce'		
		
	}
}

loadDB.dependsOn createDB

tasks.test.dependsOn loadDB
tasks.systemTest.dependsOn loadDB

//deploy in locale del file war in Tomcat
//la proprietà tomcatHome è stata definita nel file gradle.properties e gradlew.properties che si trovano nella cartella C:\Users\rosar\.gradle
task deploy (dependsOn: war){
   //def tomcatHome = "C:/Program Files/Apache Software Foundation/Tomcat 9.0"
    println "Copy from ${libsDir.getPath()} into ${tomcatHome}/webapps"
    copy {
    	from war.archivePath
    	into "${tomcatHome}/webapps"
    }
}


/*
war {
    from (project(':AsteOnLine2').file('build/libs'))
}
*/




























































