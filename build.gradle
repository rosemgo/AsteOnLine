buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
    }
}

apply plugin: 'java'
apply plugin: 'war'
//apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'findbugs'


// JDK version source compatibility
sourceCompatibility = 1.8

// project version
//version = '1.0'
// War file name
war.baseName = 'AsteOnLine'

// Web directory, this overrides the default value "webapp"
project.webAppDirName = 'WebContent'


repositories {
    mavenLocal()
    mavenCentral()
}

// Set source directory
sourceSets {
        //percorso di compilazione 
        main {
            java {
                srcDir 'src'
            }
        }
        

        //lanciare test automaticamente con gradle
        test {
	        java {
	            srcDirs = ["test"]  
	        }
    	}
        
    }

// dependencies to run on tomcat, are mandatory for tomcat plugin
dependencies {
   // def tomcatVersion = '7.0.57'
  /*
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
   */ 
    
    //dipendendenza librerie
     compile fileTree(dir: 'WebContent/WEB-INF/lib', include: ['*.jar'])
     testCompile "junit:junit:4.11"
}

// context where tomcat is deployed, by defautl localhost:8080/
//tomcatRun.contextPath = '/'
//tomcatRunWar.contextPath = '/'


//creazione documentazione java
javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

/*
findbugs{
	ignoreFailures = true //ignora gli errori di findbugs facendo completare la build, logicmente gli errori non saranno mostrati nel file html
    
}
*/


tasks.withType(FindBugs) {
    
    ignoreFailures = true //ignora gli errori di findbugs facendo completare la build, logicmente gli errori non saranno mostrati nel file html
    
    effort = "min"
    reportLevel = "high"
    
    
    reports {
        xml.enabled = false
        xml.withMessages = true
        html.enabled true
        //html.enabled = !xml.isEnabled()
        xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
    }
    
    
}


test {
   ignoreFailures = true

    reports {
        junitXml.enabled = false
        html.enabled = true
    }               
}

//war {
//    from (project(':AsteOnLine').file('build/resources/main'))
//}




/*
task customFindbugs(type: FindBugs) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "low"
    classes = files("$project.buildDir/intermediates/classes")

    // Use this only if you want exclude some errors
    excludeFilter = file("$rootProject.rootDir/config/findbugs/exclude.xml")

   // source = fileTree('src/main/java/')
    classpath = files()

    reports {
        xml.enabled = false
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
        xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
    }
}

build.dependsOn customFindbugs
*/


/*
task checkFindBugsReport << {
   def xmlReport = findbugsMain.reports.xml
   def slurped = new XmlSlurper().parse(xmlReport.destination)
   def bugsFound = slurped.BugInstance.size()
   if (bugsFound > 0) {
      throw new GradleException("$bugsFound FindBugs rule violations were found. See the report at: $xmlReport.destination")
   }
}

findbugsMain.finalizedBy checkFindBugsReport
*/
