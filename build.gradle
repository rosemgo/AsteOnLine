/*buildscript {


    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
               
    }
}
*/


apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

//apply plugin: 'com.bmuschko.tomcat'


repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
}


// JDK version source compatibility
sourceCompatibility = 1.8

// project version
//version = '1.0'

// creazione del file war nella cartella build\libs, nella post compilazione di Jenkins viene deployato su Tomcat 
// War file name 
war.baseName = 'AsteOnLine'

// Web directory, this overrides the default value "webapp"
project.webAppDirName = 'WebContent'


// Set source directory, istruisco gradle su dove trovare i file di produzione ed i file di test
sourceSets {
        //percorso file di produzione
        main {
            java {
                srcDirs 'src'
            }
        }
        //percorso file di test
        test {
	        java {
	            srcDirs 'test/it/unisannio/sweng/rosariogoglia/daoImpl' 
	        }
    	}        
}


dependencies {

     //dipendendenza librerie 
     compile fileTree(dir: 'WebContent/WEB-INF/lib', include: ['*.jar'])
     
     compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.+'
  
     compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.+'
     
     compile 'org.jacoco:jacoco-maven-plugin:0.7.+'
     compile 'com.google.guava:guava:21.0'
     
     compile group: 'mysql', name: 'mysql-connector-java', version: '5.+'
            
     testCompile "junit:junit:4.11"
     
     testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
     
     testCompile 'org.seleniumhq.selenium:selenium-java:3.3.1'
     
   
  /*  // dependencies to run on tomcat, are mandatory for tomcat plugin
    def tomcatVersion = '7.0.57'
   
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
    */   
}

/*
// context where tomcat is deployed, by defautl localhost:8080/
tomcatRun.contextPath = '/'
tomcatRunWar.contextPath = '/'
*/

//deploy in locale del file war in Tomcat
//la proprietà tomcatHome è stata definita nel file gradle.properties e gradlew.properties che si trovano nella cartella C:\Users\rosar\.gradle
task deploy (dependsOn: war){
   //def tomcatHome = "C:/Program Files/Apache Software Foundation/Tomcat 9.0"
    println "Copy from ${libsDir.getPath()} into ${tomcatHome}/webapps"
    copy {
    	from war.archivePath
    	into "${tomcatHome}/webapps"
    }
    
   /* 
    println "Copy from ${libsDir.getPath()} into " + System.env.'TOMCAT_HOME' + "//webapps"
    copy {
    	from war.archivePath
    	into System.env.'TOMCAT_HOME' + "//webapps"
    }
    */
}



//setting del task findbug
findbugs{
	sourceSets = [sourceSets.main]
	ignoreFailures = true //ignora gli errori di findbugs facendo completare la build, logicamente gli errori non saranno mostrati nel file html
    reportsDir = file("$project.buildDir/reports/findbugsReport")
    effort = "max" //livello di sforzo di analisi eseguito dal tool, livelli più elevati aumentano la precisione e trovano più bug a spese del tempo di esecuzione e del consumo di memoria.
    reportLevel = "high"
    
}

tasks.withType(FindBugs) {
           
    reports {
        xml.enabled = false
        html.enabled = true
      //xml.destination = file("$project.buildDir/reports/findbugs/findbugs-output.xml")
      //html.destination = file ("$project.buildDir/reports/findbugs/findbugs-output.html")
      //si può anche scrivere così:
      //html.destination "$project.buildDir/reports/findbugs/findbugs-output.html"
    }
     
}


//setting del task Jacoco
jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$project.buildDir/reports/jacocoReport")
}

tasks.withType(JacocoReport) {

    reports {
        xml.enabled false
        csv.enabled false
        html.enabled = true
       	html.destination = file("$project.buildDir/reports/jacocoReport/jacoco-output.html")
    }
}


//setting del task test
test {
   ignoreFailures = true
   finalizedBy jacocoTestReport
   
   reports {
       junitXml.enabled = false
       html.enabled = true
       html.destination = file("$project.buildDir/reports/JUnitReport")
   }               
}

//creazione e caricamente DB dal dump

task createDB{
	project.exec {
		
		commandLine 'mysql', "--host=localhost", "--port=3306", "--user=root", "--password=root", "--execute=CREATE DATABASE IF NOT EXISTS ecommerce"		
		
	}
}

task loadDB{
	project.exec{
		
		standardInput = new FileInputStream(project.file("$rootProject.projectDir/DumpEcommerce.sql"))

		commandLine 'mysql', "--user=root", "--password=root", "--host=localhost", "--port=3306", 'ecommerce'		
		
	}
}

loadDB.dependsOn createDB

tasks.test.dependsOn loadDB


//setting del task Javadoc
javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    failOnError = false
}




/*
task mysql (type:Exec) {
	commandLine 'mysql', 'ecommerce', ‘<ecommerce.sql’
}
*/

/*
task createDB (type:Exec){
		
		commandLine 'mysql', "--host=localhost", "--port=3306", "--user=root", '--execute=CREATE DATABASE IF NOT EXISTS provadb'		
	
}
*/

/*
war {
    from (project(':AsteOnLine2').file('build/libs'))
}
*/


/*
task customFindbugs(type: FindBugs) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "low"
    classes = files("$project.buildDir/intermediates/classes")

    // Use this only if you want exclude some errors
    excludeFilter = file("$rootProject.rootDir/config/findbugs/exclude.xml")

   // source = fileTree('src/main/java/')
    classpath = files()

    reports {
        xml.enabled = false
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
        xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
    }
}

build.dependsOn customFindbugs
*/


/*
task checkFindBugsReport << {
   def xmlReport = findbugsMain.reports.xml
   def slurped = new XmlSlurper().parse(xmlReport.destination)
   def bugsFound = slurped.BugInstance.size()
   if (bugsFound > 0) {
      throw new GradleException("$bugsFound FindBugs rule violations were found. See the report at: $xmlReport.destination")
   }
}

findbugsMain.finalizedBy checkFindBugsReport
*/
